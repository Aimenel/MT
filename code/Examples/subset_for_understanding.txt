//assert false
field x:Int

method foo(this:Ref) 
requires acc(this.x)
requires this.x ==3
requires this.x == 2
{
    assert false;
}

method foo2(this:Ref) 
requires acc(this.x)
requires acc(this.x)
{
    assert false;
}

//wildcard && write
field f:Int

method m(a:Ref)
requires acc(a.f, wildcard)
ensures acc(a.f,wildcard)
{
    m(a)
    assert(a.f == old(a.f))
}

method m2(a:Ref)
requires acc(a.f,write)
ensures acc(a.f,write)
{
    m2(a)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert(a.f == old(a.f))
}

//receiver null?: need permission for input parameter
field f: Int

method test02(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
{
  //:: ExpectedOutput(assert.failed:receiver.null)
  assert x.f == old(x.f)
}

method test03(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
  requires x in s
{
  assert x.f == old(x.f)
}


//asserts need permission
method test05(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
  requires forall i: Int :: i in [0..|s|) && s[i].f > 0 ==> s[i].f > 5
  requires x in s
{
  var v: Int := x.f
  exhale forall i: Int :: i in [0..|s|) && s[i].f > 5 ==> acc(s[i].f)

  if (v <= 0) {
    assert x.f == old(x.f)
  }
}